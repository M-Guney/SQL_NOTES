--> USERDEFINED FUNCTION
use GYSALES_RDMS_FULL
--SCALAR VALUED FUNCTION (scalar : ölçekli, dereceli, orantýlý)
--Toplama Fonksiyonu
		CREATE FUNCTION dbo.TOPLA(@SAYI1 AS INT,@SAYI2 AS INT)
		RETURNS INT
		AS 
		BEGIN
			DECLARE @SONUC AS INT
			SET @SONUC = @SAYI1 + @SAYI2
			RETURN @SONUC 
		END

		SELECT DBO.TOPLA(10,123)--133


--Dört Ýþlem Fonksiyonu
		ALTER FUNCTION dbo.DORTISLEM(@SAYI1 AS INT,@SAYI2 AS INT,@ISLEM AS VARCHAR(15))
		RETURNS FLOAT
		AS
		BEGIN
			DECLARE @SONUC AS FLOAT
			IF @ISLEM = 'carp' 
				SET @SONUC = @SAYI1 * @SAYI2
			IF @ISLEM = 'topla'
				SET @SONUC = @SAYI1 + @SAYI2
			IF @ISLEM = 'cýkar'
				SET @SONUC = @SAYI1 - @SAYI2
			IF @ISLEM = 'bol'
				SET @SONUC = @SAYI1 / CONVERT(FLOAT,@SAYI2) --UNUTMA GIRILEN DEGERLERDEN EN AZ BIRI FLOAT OLMAK ZORUNDA 
			RETURN @SONUC
		END
		SELECT dbo.DORTISLEM(13,5,'CARP') CARP --65
		SELECT dbo.DORTISLEM(13,5,'topla')TOPLA--18
		SELECT dbo.DORTISLEM(13,5,'CIKAR') CIKAR--8
		SELECT dbo.DORTISLEM(13,5,'BOL')BOL --2,6


--Ay Adý Getiren Fonksiyon --06.Jun
		CREATE FUNCTION dbo.GETMONTHNAME(@DATE AS DATETIME)
		RETURNS VARCHAR(10)
		AS
		BEGIN
		DECLARE @RESULT AS VARCHAR(10)
			IF DATEPART(MONTH,@DATE)<10
				SET @RESULT = CONCAT(0,MONTH(@DATE),'.',LEFT(DATENAME(MONTH,@DATE),3))
			ELSE 
				SET @RESULT = CONCAT(MONTH(@DATE),'.',LEFT(DATENAME(MONTH,@DATE),3))
		RETURN @RESULT
		END

		SELECT dbo.GETMONTHNAME(GETDATE())--05.May


--Ürün Bilgisi Getiren Fonksiyonlar 1
		CREATE FUNCTION dbo.GETITEMSALE(@ITEMID AS INT)
		RETURNS FLOAT
		AS
		BEGIN
		DECLARE @RESULT AS FLOAT
			SELECT @RESULT = SUM(LINETOTAL) FROM ORDERDETAILS  WHERE ITEMID=@ITEMID
			RETURN @RESULT
		END

		CREATE FUNCTION dbo.GETITEMAMOUNT(@ITEMID AS INT)
		RETURNS FLOAT
		AS
		BEGIN
		DECLARE @RESULT AS FLOAT
			SELECT @RESULT = SUM(AMOUNT) FROM ORDERDETAILS  WHERE ITEMID=@ITEMID
			RETURN @RESULT
		END

		SELECT *,(dbo.GETITEMSALE(I.ID)) TOPLAMCIRO, (dbo.GETITEMAMOUNT(I.ID)) TOPLAMADET FROM ITEMS I


--Ürün Bilgisi Getiren Fonksiyonlar 2
		-- Satýldýgý en yüksek, en düþük ve ortalama fiyat bilgisini getiren sql fonksiyonu yaz.

		CREATE FUNCTION dbo.GETIT_MIN(@ITEMID AS INT)
		RETURNS FLOAT
		AS
		BEGIN
		DECLARE @RESULT FLOAT

			SELECT @RESULT = MIN(UNITPRICE) FROM ORDERDETAILS  WHERE ITEMID=@ITEMID 
			RETURN @RESULT
		END

		CREATE FUNCTION dbo.GETIT_MAX(@ITEMID AS INT)
		RETURNS FLOAT
		AS
		BEGIN
		DECLARE @RESULT FLOAT

			SELECT @RESULT = MAX(UNITPRICE) FROM ORDERDETAILS  WHERE ITEMID=@ITEMID 
			RETURN @RESULT
		END

		CREATE FUNCTION dbo.GETIT_AVG(@ITEMID AS INT)
		RETURNS FLOAT
		AS
		BEGIN
		DECLARE @RESULT FLOAT

			SELECT @RESULT = AVG(UNITPRICE) FROM ORDERDETAILS  WHERE ITEMID=@ITEMID 
			RETURN @RESULT
		END
		-- Satýldýgý en yüksek, en düþük ve ortalama fiyat bilgisini getiren sql fonksiyonu yaz
		SELECT *,(dbo.GETIT_MIN(I.ID)) ENDUSUK_FIYAT, (dbo.GETIT_MAX(I.ID)) ENYUKSEK_FIYAT, (dbo.GETIT_AVG(I.ID)) ORTLAMA_FIYAT FROM ITEMS I
--#########################################################################################################--
--INLINE TABLED TABLED FUNTION

		CREATE FUNCTION dbo.FNITEMINFO
		(	
			-- Add the parameters for the function here
			@ITEMID AS INT
		)
		RETURNS TABLE 
		AS
		RETURN 
		(
			-- Add the SELECT statement with parameter references here
			SELECT I.ITEMCODE, I.ITEMNAME, SUM(OD.LINETOTAL) TOTALSALE, SUM(OD.AMOUNT) TOTALAMOUNT,
			MIN(OD.UNITPRICE) MINPRICE, MAX(OD.UNITPRICE) MAXPRICE,ROUND(AVG(OD.UNITPRICE),2) AVGPRICE
			FROM ITEMS I
			JOIN ORDERDETAILS OD ON OD.ITEMID = I.ID
			WHERE I.ID = @ITEMID
			GROUP BY I.ITEMCODE, I.ITEMNAME
		) 
		GO 
		
		SELECT I.ITEMCODE,I.ITEMNAME,ITEMINFO.MINPRICE ENDUSUK_FIYAT, ITEMINFO.MAXPRICE ENYUKSEK_FIYAT, ITEMINFO.AVGPRICE ORTLAMA_FIYAT FROM ITEMS I
		CROSS APPLY(SELECT * FROM dbo.FNITEMINFO(I.ID))ITEMINFO
		ORDER BY 1

--Multi Statement Table Valued Function

		ALTER FUNCTION dbo.FNITEMINFO_MULTI
		(
			-- Add the parameters for the function here
		@ITEMID AS INT

		)
		RETURNS 
		@RESULT TABLE 
		(
			-- Add the column definitions for the TABLE variable here
		ITEMCODE VARCHAR(100),
		ITEMNAME  VARCHAR(100),
		TOTALSALE FLOAT,
		TOTALAMOUNT INT,
		MINPRICE  FLOAT,
		MAXPRICE  FLOAT,
		AVGPRICE  FLOAT,
		TOTALSALEUSD FLOAT
		)
 
		BEGIN
			-- Fill the table variable with the rows for your result set
			INSERT INTO @RESULT(ITEMCODE,ITEMNAME,TOTALSALE,TOTALAMOUNT,MINPRICE,MAXPRICE,AVGPRICE)
			SELECT I.ITEMCODE, I.ITEMNAME, SUM(OD.LINETOTAL) TOTALSALE, SUM(OD.AMOUNT) TOTALAMOUNT,
					MIN(OD.UNITPRICE) MINPRICE, MAX(OD.UNITPRICE) MAXPRICE,ROUND(AVG(OD.UNITPRICE),2) AVGPRICE
					FROM ITEMS I
					JOIN ORDERDETAILS OD ON OD.ITEMID = I.ID
					WHERE I.ID = @ITEMID
					GROUP BY I.ITEMCODE, I.ITEMNAME

			UPDATE @RESULT SET TOTALSALEUSD = TOTALSALE/32.20
			RETURN 
		END

		GO

		SELECT * FROM dbo.FNITEMINFO_MULTI(2) --000002	MISIRÖZÜ YAÐI 1LT.PET ÞÝÞE	42298,2	958	26,6	74	44,05

		SELECT * FROM dbo.FNITEMINFO_MULTI(2) --000002	MISIRÖZÜ YAÐI 1LT.PET ÞÝÞE	42298,2	958	26,6	74	44,05	1313,60869565217;


--

